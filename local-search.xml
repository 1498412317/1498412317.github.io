<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/24/sql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/02/24/sql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><ul><li>from–where–group by–having–order by–limit–select</li></ul><h2 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h2><h3 id="1、select-from"><a href="#1、select-from" class="headerlink" title="1、select from"></a>1、select from</h3><p>select 字段名 from 表明</p><p>select  字段名 as 别名 from  表名 （as可以省略）</p><ul><li>查询多列</li></ul><p>select  字段名1,字段名2,字段名3 from  表名</p><ul><li>查询所有列</li></ul><p>select * from  表名</p><ul><li>数据去重</li></ul><p>select  distinct  字段名 from 表名</p><ul><li>select中的计算字段</li></ul><p>select   字段名,计算字段 from  表名称 </p><h3 id="2、where"><a href="#2、where" class="headerlink" title="2、where"></a>2、where</h3><p>select 字段名 from 表名 where 表达式</p><ul><li>运算符查询语法</li></ul><p>select 字段名 from 表名 where 字段名 运算符 值</p><ul><li>模糊查询语法</li></ul><p>select 字段名 from 表名 where 字段名 like ‘通配符+字符’</p><ul><li>使用多条件查询</li></ul><p>select 字段名 from 表名 where 条件代码1 and|or 条件代码2</p><ul><li>运算符</li></ul><p>&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、&lt;&gt;&#x2F;!&#x3D;不等于</p><p>between and </p><p>in、not in </p><p>is null、is not null</p><p>逻辑运算符：and与、or或、not非</p><ul><li>通配符</li></ul><p>%表示任何字符出现任意次数</p><p>_表示任何字符出现一次</p><h3 id="3、order-by"><a href="#3、order-by" class="headerlink" title="3、order by"></a>3、order by</h3><p>select 字段名 from 表名 [where 表达式] [order by 字段名 asc|desc]</p><ul><li>order by 字段名 asc|desc  规定查询出的结果集显示的顺序</li><li>order by核心子句是可选项，使用该子句是为了对被查询出的结果集，指定依据字段排序</li><li>asc指定该字段升序排序，desc为降序排序，不写则默认为升序排序</li></ul><h3 id="4、limit"><a href="#4、limit" class="headerlink" title="4、limit"></a>4、limit</h3><ul><li>查询结果返回前n行</li></ul><p>select 字段名 from 表名 [where 表达式] [order by 字段名 asc|desc] <strong>[limit n]</strong></p><ul><li>查询结果返回第x+1行开始的n行到x+n行</li></ul><p>select 字段名 from 表名 [where 表达式] [order by 字段名 asc|desc] <strong>[limit x,n]</strong></p><h3 id="5、group-by-聚合函数"><a href="#5、group-by-聚合函数" class="headerlink" title="5、group by&amp;聚合函数"></a>5、group by&amp;聚合函数</h3><p>select 字段名1,聚合函数(字段名) from 表名 [where 表达式] [group by 字段名1] [order by 字段名 asc|desc] [limit [位置偏移量,]行数]</p><ul><li>聚合函数</li></ul><p>AVG()、COUNT()、MAX()、MIN()、SUM()</p><h3 id="6、having"><a href="#6、having" class="headerlink" title="6、having"></a>6、having</h3><p>select 字段名 from 表名 [where 表达式] [group by 字段名] [having 表达式] [order by 字段名 asc|desc] [limit [位置偏移量,]行数]</p><h3 id="7、部分常见函数"><a href="#7、部分常见函数" class="headerlink" title="7、部分常见函数"></a>7、部分常见函数</h3><ul><li>数学函数</li></ul><p>round(x,y)——四舍五入函数</p><ul><li>字符串函数</li></ul><p>concat(s1,s2,…)——连接字符串函数</p><p>replace(s,s1,s2)——替换函数</p><p>left(s,n)——从左截取字符串一部分的函数</p><p>right(s,n)——从右截取字符串一部分的函数</p><p>substring(s,n,len)——从指定位置截取字符串一部分的函数</p><ul><li>数据类型转换函数</li></ul><p>cast(x as type)——转换数据类型的函数</p><ul><li>日期时间函数</li></ul><p>year(date)——获取年的函数</p><p>month(date)——获取月的函数</p><p>day(date)——获取日的函数</p><p>date_add(date,interval expr type)——对指定起始时间进行加操作</p><blockquote><ul><li>select</li><li>whn 更新时间</li><li>,date_add(whn,interval 2 day) 加2天</li><li>from covid</li><li>where recovered &gt; 0</li></ul></blockquote><p>date_sub(date,interval expr type)——对指定起始时间进行减操作</p><p>datediff(date1,date2)——计算两个日期之间间隔的天数</p><p>date_format(date,format)——将日期和时间格式化</p><ul><li>条件判断函数——根据满足不同条件，执行相应流程</li></ul><p>if(expr,v1,v2)</p><p>case when</p><blockquote><ul><li>select</li><li>recovered 累计治愈人数</li><li>,case when recovered &#x3D; 1 then ‘one’ when recovered &gt; 1 then ‘more’ else ‘0’ end</li><li>from covid</li><li>where recovered &gt; 0</li></ul></blockquote><h2 id="高级语句"><a href="#高级语句" class="headerlink" title="高级语句"></a>高级语句</h2><h3 id="1、窗口函数"><a href="#1、窗口函数" class="headerlink" title="1、窗口函数"></a>1、窗口函数</h3><ul><li>排序窗口函数语法</li></ul><p>rank()over([partition by 字段名] order by 字段名 asc|desc)12345</p><p>dense_rank()over([partition by 字段名] order by 字段名 asc|desc)11345</p><p>row_number()over([partition by 字段名] order by 字段名 asc|desc)11223</p><blockquote><ul><li>select</li><li>yr</li><li>,party</li><li>,votes</li><li>,rank()over(partition by yr order by votes desc) as posn</li><li>from ge</li><li>where constituency &#x3D; ‘S14000021’</li><li>order by party,yr</li></ul></blockquote><ul><li>偏移分析函数语法</li></ul><p>lag(字段名,偏移量[,默认值])over([partition by 字段名] order by 字段名 asc|desc)</p><p>lead(字段名,偏移量[,默认值])over([partition by 字段名] order by 字段名 asc|desc)</p><blockquote><ul><li>select</li><li>name</li><li>,date_format(whn,’%Y-%m-%d’) date</li><li>,confirmed 当天截至时间累计确诊人数</li><li>,lag(confirmed,1)over(partition by name order by whn) 昨天截至时间累计确诊人数</li><li>,(confirmed - lag(confirmed,1)over(partition by name order by whn)) 每天新增确诊人数</li><li>from covid</li><li>where name in (‘France’,’Germany’) and month(whn) &#x3D; 1</li><li>order by whn</li></ul></blockquote><h3 id="2、表连接"><a href="#2、表连接" class="headerlink" title="2、表连接"></a>2、表连接</h3><ul><li>内连接inner join语法（注意内连接inner可以省略，直接使用join默认为内连接）【只保留匹配上的数据行】</li></ul><p>select 字段名 from 表名1 inner join 表名2 on 表名1.字段名 &#x3D;  表名2.字段名</p><ul><li>左连接left join语法【保留左表】</li></ul><p>select 字段名 from 表名1 left join 表名2 on 表名1.字段名 &#x3D;  表名2.字段名</p><ul><li>右连接right join语法【保留右表】</li></ul><p>select 字段名 from 表名1 right join 表名2 on 表名1.字段名 &#x3D;  表名2.字段名</p><h3 id="3、子查询"><a href="#3、子查询" class="headerlink" title="3、子查询"></a>3、子查询</h3><p>子查询本身是一个完整的查询，由括号包裹嵌套在主查询中</p><p>子查询最后返回查询出的结果给主查询</p><p>子查询可以在select，from，where，having子句（同where）中使用，但要注意不同子句能接受的子查询种类有差别</p><p>子查询可以多重嵌套（子查询可以作为主查询再嵌套子查询）</p><blockquote><ul><li><p>select name</p></li><li><p>from world</p></li><li><p>where gdp&#x2F;population &gt; (</p><ul><li><p>​                                               select gdp&#x2F;population</p></li><li><p>​                                               from world</p></li><li><p>​                                               where name&#x3D;’united kingdom’</p></li><li><p>​                                           )</p></li></ul></li><li><p>and continent&#x3D;’europe’</p></li></ul></blockquote><blockquote><ul><li><p>select</p></li><li><p>name</p></li><li><p>,population</p></li><li><p>from world</p></li><li><p>where population &gt; (</p><ul><li><p>​                                             select population</p></li><li><p>​                                             from world</p></li><li><p>​                                             where name&#x3D; ‘Canada’</p></li><li><p>​                                  )</p></li></ul></li><li><p>and population &lt; (</p><ul><li><p>​                                       select population</p></li><li><p>​                                       from world</p></li><li><p>​                                       where name &#x3D; ‘Poland’</p></li><li><p>​                              )</p></li></ul></li></ul></blockquote><blockquote><ul><li><p>select</p></li><li><p>name</p></li><li><p>,continent</p></li><li><p>,population</p></li><li><p>from world</p></li><li><p>where continent not in (</p><ul><li><p>​                                           select distinct continent</p></li><li><p>​                                           from world</p></li><li><p>​                                           where population &gt;25000000</p></li><li><p>​                                        )</p></li></ul></li></ul></blockquote><blockquote><ul><li><p>select</p></li><li><p>continent</p></li><li><p>,name</p></li><li><p>,area</p></li><li><p>from world</p></li><li><p>where (continent,area) in  (</p><ul><li><p>​                                                   select</p></li><li><p>​                                                   continent</p></li><li><p>​                                                  ,max(area)</p></li><li><p>​                                                   from world</p></li><li><p>​                                                   group by continent</p></li><li><p>​                                               )</p></li></ul></li></ul></blockquote><blockquote><ul><li><p>select</p></li><li><p>name</p></li><li><p>,日期</p></li><li><p>,每天新增治愈人数</p></li><li><p>,rank()over(partition by name order by 每天新增治愈人数 desc) 排名</p></li><li><p>from</p></li><li><p>(</p><ul><li><p>select</p></li><li><p>name</p></li><li><p>,date_format(whn,’%Y年%m月%d日’) 日期</p></li><li><p>,(recovered - lag(recovered,1)over(partition by name order by whn)) 每天新增治愈人数</p></li><li><p>from covid</p></li><li><p>where name in (‘France’,’Italy’)</p></li></ul></li><li><p>) re</p></li><li><p>order by 排名</p></li></ul></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/24/spss%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/02/24/spss%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="SPSS"><a href="#SPSS" class="headerlink" title="SPSS"></a>SPSS</h1><p>statistics package social scientis</p><h2 id="描述统计"><a href="#描述统计" class="headerlink" title="描述统计"></a>描述统计</h2><p>分类变量</p><p>连续变量：均值M（集中）、标准差SD（离散）、偏度峰度（分布）越接近0越符合正态分布</p><p>正态分布：中间高两边低</p><p>spss：分析-描述统计-描述</p><p>分类变量：打开显示频率表</p><p>连续变量：关闭频率表</p><p>其中统计是针对连续变量的：可勾选需要的参数</p><p>条形图：分类为横轴</p><p>直方图：连续变量为横轴</p><h2 id="独立样本t检验"><a href="#独立样本t检验" class="headerlink" title="独立样本t检验"></a>独立样本t检验</h2><p>利用来自两个总体的样本，推测两个总体的均值是否存在差异</p><p>p：猜测错误的可能性，越低准确性越强</p><p>spss：分析-比较平均值-t检验</p><p>显著性&gt;0.05看假定等方差否则看不假定等方差行</p><p>sig（双尾）就是p值 p分为三个等级 小于0.05 0.01 0.001 越小就越显著</p><p>显著性p：”有没有“</p><p>效应量d：”有多大“</p><p>d&#x3D;2t&#x2F;根号df（t为t值，df即自由度）</p><p>0.2、0.5、0.8对应小、中、大效应</p><h2 id="单因素方差分析（ANOVA）"><a href="#单因素方差分析（ANOVA）" class="headerlink" title="单因素方差分析（ANOVA）"></a>单因素方差分析（ANOVA）</h2><p>两组以上独立样本，在某一变量均值上是否有差异</p><p>类似于t检验但是需要两组以上的样本，两组样本还是使用t检验</p><p>事后比较（至少有一对有差异）</p><p>具体各组之间的两两比较：</p><p>1、方差齐性：scheffe雪费（样本数不同时使用，问卷）、turkey图基（样本数一样时使用，实验）</p><p>2、方差不齐：games-howell盖姆斯-豪厄尔</p><p>spss：分析-比较平均值-单因素anova检验</p><p>事后比较：选择雪费和盖姆斯</p><p>选项：选择统计中的描述、方差齐性检验如果方差不齐需要选择韦尔奇</p><p>显著性&gt;0.05就说明是齐性的</p><p>效应量：偏Eta方 0.01、0.06、0.14分别为小、中、大效应量</p><p>spss：分析-一般线性模型-单变量 选项：效应量估算勾选</p><h2 id="卡方独立性检验"><a href="#卡方独立性检验" class="headerlink" title="卡方独立性检验"></a>卡方独立性检验</h2><p>判断两个分类变量是否独立</p><ul><li>而t检验和方差分析都是 分类变量作为自变量、连续变量作为因变量</li></ul><p>spss：分析-描述统计-交叉表（自变量一般放在列位置）</p><p>统计选项：选择卡方以及phi和克莱姆v（即效应量）</p><p>单元格选项：实测以及列百分比</p><p>卡方检验：看皮尔逊卡方的渐进显著性（双侧）的值</p><p>单元格期望值大于等于5 如果存在20%单元格的期望值小于5，需要fisher矫正</p><p>效应量cramerV（克莱姆v）系数：0.1、0.3、0.5分别为小、中、大效应量</p><h2 id="相关分析"><a href="#相关分析" class="headerlink" title="相关分析"></a>相关分析</h2><p>两个连续变量之间的线性关联程度（共变程度）</p><p>相关系数r：-1到1之间，正为正相关、负为负相关，绝对值越大关联程度越大</p><p>r为±0.2弱相关、±0.5中等相关、±0.8强相关</p><p>spss：分析-相关-双变量</p><p>统计选项：平均值和标准差</p><p>皮尔逊相关性就是r</p><p>相关性：因果、互为因果、间接、共因</p><h2 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h2><p>线性回归OLS</p><p>具有线性因果关系的变量，建立详细的数学表达式 Y&#x3D;b1x1+b2x2+b3x3+…..+b</p><p>回归模型指标</p><p>1、回归模型的显著性F（anova）</p><p>2、回归模型的R方即效应量小、中、大分别为0.01、0.09、0.25</p><p>3、各自变量的显著性t</p><p>4、各自变量的回归系数b以及标准回归系数</p><p>标准化z: （xi-x的平均数）&#x2F;方差s 其单位为方差 </p><p>spss：分析-回归-线性回归</p><p>统计选项：勾选共线性诊断 VIF指标&gt;5表示有共线性问题</p><ul><li>标准化z可以减少共线性问题即自变量间的共性</li></ul><p>未标准化系数的正负可以显示正负相关性</p><h2 id="调节效应"><a href="#调节效应" class="headerlink" title="调节效应"></a>调节效应</h2><p>变量之间的回归关系受到其他变量的影响</p><p>eg：X自变量【努力】–&gt;Y【因变量收获】（被W调节变量【身份】所影响）</p><p>分析步骤：</p><p>1、对X、Y、W进行标准化</p><p>2、计算交互项X*W（此指标显著，调节效应成立）</p><p>3、将X、W、X*W作为预测变量、Y作为结果变量，进行回归分析</p><p>效应量：deta R方或者交互项X*W的标准化回归系数</p><p>简单斜率：调节变量在某个特定值下，自变量对因变量的回归系数</p><p>调节变量取值：M±SD（平均值加减方差）</p><p>spss：分析-描述统计-描述（将标准化值另存为变量）求Z</p><p>spss：转换-计算变量求X*W</p><p>process宏（需要下载）：分析-回归-process model1  option：-1sd，mean，+1sd;genrate code for…</p><h2 id="中介效应"><a href="#中介效应" class="headerlink" title="中介效应"></a>中介效应</h2><p>自变量通过其他变量间接影响因变量</p><p>eg:自变量X压力–&gt;中介变量M睡眠–&gt;因变量Y绩效</p><p>中介效应的三个回归模型</p><p>1、X–&gt;Y</p><p>2、X–&gt;M</p><p>3、X+M–&gt;Y</p><p>中介效应系数</p><p>c总效应</p><p>c‘ 直接效应</p><p>a中介前半段</p><p>b中介后半段</p><p>a*b间接效应（指标）</p><p>c &#x3D; c’ +a*b</p><p>process：model4 option：show total effect+standardized effect</p><p>看total effect中 标准化后的bootllci和bootulci为同号则显著反之不显著</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/24/python%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/02/24/python%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="python（pandas库）"><a href="#python（pandas库）" class="headerlink" title="python（pandas库）"></a>python（pandas库）</h1><p>jupyter notebook ：ctrl+shift+k快捷键打开目录</p><p>代码自动补全：新版本不需要下载插件 settings–code completion–enable autocompletion</p><p>python常用的4个数据类型</p><p>1、数字Numbers：int型、float型、bool型</p><p>2、字符串String</p><p>3、列表List</p><p>4、字典Dictionary</p><blockquote><p>字典嵌套列表：</p><p>{<br>    ‘id’: [53766889040208384, 53783364377004544, 53783376819848704, 53788075865425920, 53811230195500032],<br>    ‘progress’: [2691, 9193, 23017, 31033, 68093],<br>    ‘content’: [‘这熟悉的bgm让人灵魂颤抖，向敌军进攻，冲啊！’, ‘DNA动了’, ‘大制作啊’, ‘好家伙 我直接好家伙’, ‘大制作’],<br>    ‘ctime’: [1629643402, 1629674826, 1629674850, 1629683812, 1629727976],<br>    ‘uid’: [‘4658843910516903647’, ‘-5089316151886879487’, ‘-5089316151886879487’, ‘-6460990597571269883’, ‘8879111121911466217’]<br>}</p></blockquote><blockquote><p>列表嵌套字典：</p><p>[<br>    {‘53766889040208384’, 2691, ‘这熟悉的bgm让人灵魂颤抖，向敌军进攻，冲啊！’, 1629643402, ‘4658843910516903647’},<br>    {‘53783364377004544’, 9193, ‘DNA动了’, 1629674826, ‘-5089316151886879487’},<br>    {‘53783376819848704’, 23017, ‘大制作啊’, 1629674850, ‘-5089316151886879487’},<br>    {‘53788075865425920’, 31033, ‘好家伙 我直接好家伙’, 1629683812, ‘-6460990597571269883’}<br>]无column名和index名</p><p>[<br>     {‘id’: 984675298218860544, ‘content’: ‘异常额外的启发’, ‘视频内时间’: 757.529},<br>     {‘id’: 55324785558898688, ‘content’: ‘14个人’, ‘视频内时间’: 807.432},<br>     {‘id’: 1092208119322427136, ‘content’: ‘及时发现异常，找到数据之间的因果关系’, ‘视频内时间’: 622.086},<br>     {‘id’: 1067411585695350784, ‘content’: ‘good’, ‘视频内时间’: 1308.365},<br>     {‘id’: 1023427862298357248, ‘content’: ‘就是需求’, ‘视频内时间’: 1295.049},<br>     {‘id’: 1028925510874641920, ‘content’: ‘拆眼有有效期的’, ‘视频内时间’: 1738.476},<br>     {‘id’: 1099897195806761984, ‘content’: ‘基于数据反馈不断迭代业务和策略’, ‘视频内时间’: 1274.392},<br>    {‘id’: 1050008151560063488, ‘content’: ‘计划’, ‘视频内时间’: 1587.059}<br>]有column名</p></blockquote><h2 id="pd-Series"><a href="#pd-Series" class="headerlink" title="pd.Series"></a>pd.Series</h2><p>它可以看作是一个一维的带标签数组。与 Python 中的列表（<code>list</code>）相比，<code>Series</code>多了一个索引（<code>index</code>）机制。</p><h3 id="创建series对象"><a href="#创建series对象" class="headerlink" title="创建series对象"></a>创建series对象</h3><h4 id="1、从列表创建："><a href="#1、从列表创建：" class="headerlink" title="1、从列表创建："></a>1、<strong>从列表创建</strong>：</h4><blockquote><p>import pandas as pd<br>data &#x3D; [1, 3, 5, 7, 9]<br>series &#x3D; pd.Series(data)</p></blockquote><p>此时，<code>Series</code>的索引默认是从 0 开始的整数序列，与列表的索引方式类似。也可以自定义索引，例如：</p><blockquote><p>index &#x3D; [‘a’, ‘b’, ‘c’, ‘d’, ‘e’]<br>series &#x3D; pd.Series(data, index &#x3D; index)</p></blockquote><h4 id="2、从字典创建："><a href="#2、从字典创建：" class="headerlink" title="2、从字典创建："></a>2、<strong>从字典创建</strong>：</h4><p>利用字典来创建<code>Series</code>是很方便的方式。字典的键会成为<code>Series</code>的索引，字典的值会成为<code>Series</code>对应索引位置的值。例如：</p><blockquote><p>data_dict &#x3D; {‘apple’: 0.5, ‘banana’: 0.75, ‘cherry’: 0.6}<br>series &#x3D; pd.Series(data_dict)</p></blockquote><p>这里创建的<code>Series</code>索引是<code>[&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;]</code>，值分别是<code>0.5</code>、<code>0.75</code>和<code>0.6</code></p><h4 id="3、通过标量值创建："><a href="#3、通过标量值创建：" class="headerlink" title="3、通过标量值创建："></a>3、<strong>通过标量值创建</strong>：</h4><p>还可以创建一个所有值都相同的<code>Series</code>。例如，创建一个长度为 3，所有值都是 5 的<code>Series</code>：</p><blockquote><p>series &#x3D; pd.Series(5, index &#x3D; [‘x’, ‘y’, ‘z’])</p></blockquote><h3 id="基本属性和操作"><a href="#基本属性和操作" class="headerlink" title="基本属性和操作"></a><strong>基本属性和操作</strong></h3><h4 id="1、索引和值的访问："><a href="#1、索引和值的访问：" class="headerlink" title="1、索引和值的访问："></a>1、<strong>索引和值的访问</strong>：</h4><p>1可以通过索引来访问Series中的值。例如，对于前面创建的series（索引为[‘a’, ‘b’, ‘c’, ‘d’, ‘e’]），可以使用series[‘a’]来访问索引为a的值。也可以使用整数索引，如series[0]（在索引是默认从 0 开始的整数序列时）。<br>2通过切片操作可以获取部分数据。例如，series[1:3]会获取索引从 1 到 2（不包括 3）的值。</p><h4 id="2、name属性："><a href="#2、name属性：" class="headerlink" title="2、name属性："></a>2、<strong><code>name</code>属性</strong>：</h4><p>可以为<code>Series</code>的索引和值分别设置名称。例如：</p><blockquote><p>series.name &#x3D; ‘Fruit Prices’<br>series.index.name &#x3D; ‘Fruit Names’</p></blockquote><p>这样在打印<code>Series</code>或者进行一些数据操作时，这些名称可以提供更好的可读性。</p><h4 id="3、基本运算："><a href="#3、基本运算：" class="headerlink" title="3、基本运算："></a>3、<strong>基本运算</strong>：</h4><p>Series支持各种数学运算。例如，如果有两个Series对象series1和series2，它们的索引相同，那么可以直接进行加法运算series1 + series2，pandas会自动将对应索引位置的值相加。如果索引不同，pandas会根据索引的交集来进行运算，并将缺失的部分用NaN（Not a Number）填充。</p><p>DataFrame的每一列本质上都是一个Series。例如，在一个DataFrame中，可以通过df[‘column_name’]的方式获取到对应的Series，其中df是一个DataFrame，column_name是列名。<br>可以使用Series来构建DataFrame。例如，有多个Series对象，将它们组合起来就可以形成一个DataFrame。</p><h2 id="pd-DataFrame"><a href="#pd-DataFrame" class="headerlink" title="pd.DataFrame"></a>pd.DataFrame</h2><p>用于以表格形式和处理数据，类似提供电子表格或数据库表格。</p><p>表格形式：DataFrame是一个二维表格，其中包含了多行和多列的数据。每个列可以有不同的数据类型，例如整数、浮点数、字符串等。</p><p>标签：DataFrame的行和列都有标签（Label），行标签称为索引（Index），列标签通常是字段名或特征名。</p><p>数据操作：DataFrame提供了丰富的数据操作方法，包括数据筛选、切片、合并、分组、聚合、排序等。</p><p>数据查看：您可以使用.head()方法来查看DataFrame的前几行数据，以了解数据的结构和内容。</p><p>数据统计：DataFrame提供了.describe()方法，用于生成数据的统计摘要信息，包括均值、标准差、简单、顶点等。</p><p>数据过滤：你可以使用条件表达式来过滤数据，例如选择满足特定条件的行。</p><p>数据可视化：Pandas 与其他数据可视化库（如 Matplotlib 和 Seaborn）结合使用，可以轻松创建各种图表和可视化，以探索和传输数据。</p><p>数据导入和导出：DataFrame可以从各种数据源导入数据，如CSV文件、Excel表格、SQL数据库等，并且可以将数据导出为不同格式的文件。</p><p>数据恢复处理：DataFrame提供了处理数据中的恢复值的方法，如删除恢复值或恢复恢复值。</p><p>数据索引：DataFrame可以使用行索引和列标签来访问特定的数据元素。</p><p>数据转换：可以对DataFrame进行各种数据转换操作，如数据类型转换、列重命名、数据透视表等。</p><h3 id="具体代码操作"><a href="#具体代码操作" class="headerlink" title="具体代码操作"></a>具体代码操作</h3><h4 id="1、从创建列表数据框："><a href="#1、从创建列表数据框：" class="headerlink" title="1、从创建列表数据框："></a>1、<strong>从创建列表数据框：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data = [[<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-number">25</span>], [<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">30</span>], [<span class="hljs-string">&#x27;Charlie&#x27;</span>, <span class="hljs-number">35</span>]]<br>df = pd.DataFrame(data, columns=[<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">      Name  Age</span><br><span class="hljs-string">0    Alice   25</span><br><span class="hljs-string">1      Bob   30</span><br><span class="hljs-string">2  Charlie   35</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="2、从字典创建数据框："><a href="#2、从字典创建数据框：" class="headerlink" title="2、从字典创建数据框："></a>2、<strong>从字典创建数据框：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Charlie&#x27;</span>], <span class="hljs-string">&#x27;Age&#x27;</span>: [<span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>]&#125;<br>df = pd.DataFrame(data)<br><span class="hljs-built_in">print</span>(df)<br>df.to_csv(<span class="hljs-string">&#x27;test.csv&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>)<br> <br><span class="hljs-comment"># 运行结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">      Name  Age</span><br><span class="hljs-string">0    Alice   25</span><br><span class="hljs-string">1      Bob   30</span><br><span class="hljs-string">2  Charlie   35</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3、访问数据："><a href="#3、访问数据：" class="headerlink" title="3、访问数据："></a>3、<strong>访问数据</strong>：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Charlie&#x27;</span>], <span class="hljs-string">&#x27;Age&#x27;</span>: [<span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>]&#125;<br>df = pd.DataFrame(data)<br>a = df[<span class="hljs-string">&#x27;Name&#x27;</span>]  <span class="hljs-comment"># 获取 &#x27;Name&#x27; 列的数据</span><br>b = df.loc[<span class="hljs-number">0</span>]    <span class="hljs-comment"># 获取第一行的数据</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-comment"># 运行结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0      Alice</span><br><span class="hljs-string">1        Bob</span><br><span class="hljs-string">2    Charlie</span><br><span class="hljs-string">Name: Name, dtype: object</span><br><span class="hljs-string">Name    Alice</span><br><span class="hljs-string">Age        25</span><br><span class="hljs-string">Name: 0, dtype: object</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="4、数据操作："><a href="#4、数据操作：" class="headerlink" title="4、数据操作："></a>4、<strong>数据操作：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Charlie&#x27;</span>], <span class="hljs-string">&#x27;Age&#x27;</span>: [<span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>]&#125;<br>df = pd.DataFrame(data)<br>a = df[<span class="hljs-string">&#x27;Age&#x27;</span>].mean()  <span class="hljs-comment"># 计算 &#x27;Age&#x27; 列的平均值</span><br>b = df.sort_values(by=<span class="hljs-string">&#x27;Age&#x27;</span>, ascending=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 按 &#x27;Age&#x27; 列排序,ascending=True是从小到大，ascending=False是从大到小</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-comment"># 运行结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">30.0</span><br><span class="hljs-string">      Name  Age</span><br><span class="hljs-string">2  Charlie   35</span><br><span class="hljs-string">1      Bob   30</span><br><span class="hljs-string">0    Alice   25</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="5、数据查看："><a href="#5、数据查看：" class="headerlink" title="5、数据查看："></a>5、<strong>数据查看：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Charlie&#x27;</span>], <span class="hljs-string">&#x27;Age&#x27;</span>: [<span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>]&#125;<br>df = pd.DataFrame(data)<br>a = df.head(<span class="hljs-number">2</span>)     <span class="hljs-comment"># 查看前几行数据，df.head()默认为前5行</span><br>b = df.tail(<span class="hljs-number">2</span>)    <span class="hljs-comment"># 查看后2行数据</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-comment"># 运行结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Name  Age</span><br><span class="hljs-string">0  Alice   25</span><br><span class="hljs-string">1    Bob   30</span><br><span class="hljs-string">      Name  Age</span><br><span class="hljs-string">1      Bob   30</span><br><span class="hljs-string">2  Charlie   35</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="6、数据统计："><a href="#6、数据统计：" class="headerlink" title="6、数据统计："></a>6、<strong>数据统计：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Charlie&#x27;</span>], <span class="hljs-string">&#x27;Age&#x27;</span>: [<span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>]&#125;<br>df = pd.DataFrame(data)<br>c=df.describe()  <span class="hljs-comment"># 生成数据的统计摘要信</span><br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-comment"># 运行结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Age</span><br><span class="hljs-string">count   3.0</span><br><span class="hljs-string">mean   30.0</span><br><span class="hljs-string">std     5.0</span><br><span class="hljs-string">min    25.0</span><br><span class="hljs-string">25%    27.5</span><br><span class="hljs-string">50%    30.0</span><br><span class="hljs-string">75%    32.5</span><br><span class="hljs-string">max    35.0</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="pandas生成csv模板"><a href="#pandas生成csv模板" class="headerlink" title="pandas生成csv模板"></a>pandas生成csv模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br> <br><span class="hljs-comment"># 二维数组</span><br>datalist = [[<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;二班&#x27;</span>,<span class="hljs-string">&#x27;班长&#x27;</span>],[<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-number">16</span>,<span class="hljs-string">&quot;三班&quot;</span>,<span class="hljs-string">&#x27;班长&#x27;</span>],[<span class="hljs-string">&#x27;小刚&#x27;</span>,<span class="hljs-number">14</span>,<span class="hljs-string">&quot;二班&quot;</span>,<span class="hljs-string">&#x27;,混子&#x27;</span>]]<br>pd.DataFrame(datalist,columns=[<span class="hljs-string">&#x27;姓名&#x27;</span>,<span class="hljs-string">&#x27;年龄&#x27;</span>,<span class="hljs-string">&#x27;班级&#x27;</span>,<span class="hljs-string">&#x27;角色&#x27;</span>]).to_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>,index=<span class="hljs-literal">False</span>,encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>,sep=<span class="hljs-string">&quot;,&quot;</span>)<br> <br><span class="hljs-comment"># 字典</span><br>datadic = &#123;<span class="hljs-string">&#x27;姓名&#x27;</span>:[<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-string">&#x27;小刚&#x27;</span>],<span class="hljs-string">&#x27;年龄&#x27;</span>:[<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">14</span>],<span class="hljs-string">&#x27;班级&#x27;</span>:[<span class="hljs-string">&#x27;二班&#x27;</span>,<span class="hljs-string">&#x27;三班&#x27;</span>,<span class="hljs-string">&#x27;二班&#x27;</span>],<span class="hljs-string">&#x27;角色&#x27;</span>:[<span class="hljs-string">&#x27;班长&#x27;</span>,<span class="hljs-string">&#x27;班长&#x27;</span>,<span class="hljs-string">&#x27;混子&#x27;</span>]&#125;<br>pd.DataFrame(datadic).to_csv(<span class="hljs-string">&#x27;data2.csv&#x27;</span>,index=<span class="hljs-literal">False</span>,encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>,sep=<span class="hljs-string">&quot;,&quot;</span>)<br> <br> <br>li = [<br>&#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;hobby&#x27;</span>: <span class="hljs-string">&quot;吃惠灵顿,羊排&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;hobby&#x27;</span>: <span class="hljs-string">&quot;吃牛排&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;hobby&#x27;</span>: <span class="hljs-string">&quot;吃猪排&quot;</span>&#125;,<br>]<br>datalist = [l.values() <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> li]<br>pd.DataFrame(datalist,columns=[<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;hobby&#x27;</span>]).to_csv(<span class="hljs-string">&#x27;data3.csv&#x27;</span>,index=<span class="hljs-literal">False</span>,encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>,sep=<span class="hljs-string">&quot;,&quot;</span>)<br> <br></code></pre></td></tr></table></figure><p>分页存储数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br> <br><span class="hljs-comment"># 采集数据分页的逻辑</span><br><span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-comment"># 采集一页数据，假设得到的数据存储在 datalist 变量中</span><br>    datalist = [[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;二班&#x27;</span>, <span class="hljs-string">&#x27;班长&#x27;</span>], [<span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&quot;三班&quot;</span>, <span class="hljs-string">&#x27;班长&#x27;</span>], [<span class="hljs-string">&#x27;小刚&#x27;</span>, <span class="hljs-number">14</span>, <span class="hljs-string">&quot;二班&quot;</span>, <span class="hljs-string">&#x27;,混子&#x27;</span>]]<br>    df = pd.DataFrame(datalist, columns=[<span class="hljs-string">&#x27;姓名&#x27;</span>, <span class="hljs-string">&#x27;年龄&#x27;</span>, <span class="hljs-string">&#x27;班级&#x27;</span>, <span class="hljs-string">&#x27;角色&#x27;</span>])<br>    <span class="hljs-keyword">if</span> page == <span class="hljs-number">0</span>:<br>        df.to_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>, index=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>, sep=<span class="hljs-string">&quot;,&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        df.to_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>, mode=<span class="hljs-string">&#x27;a&#x27;</span>, header=<span class="hljs-literal">False</span>, index=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>, sep=<span class="hljs-string">&quot;,&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="pandas与sql交互"><a href="#pandas与sql交互" class="headerlink" title="pandas与sql交互"></a>pandas与sql交互</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlalchemy<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> sqlite3<br> <br><span class="hljs-comment"># 1.创建连接</span><br>engine = sqlalchemy.create_engine(<span class="hljs-string">&#x27;mysql+pymysql://root:root@localhost:3306/yzznewdb&#x27;</span>)<br><span class="hljs-comment"># 2.创建表</span><br>engine.execute(<span class="hljs-string">&#x27;CREATE TABLE IF NOT EXISTS testtext(id INT PRIMARY KEY AUTO_INCREMENT NOT NULL ,name TEXT,COMMENT TEXT );&#x27;</span>)<br><span class="hljs-comment"># 3.插入数据</span><br>data = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:[<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;赵六&#x27;</span>],<span class="hljs-string">&#x27;comment&#x27;</span>:[<span class="hljs-string">&#x27;我是张三&#x27;</span>,<span class="hljs-string">&#x27;我是李四&#x27;</span>,<span class="hljs-string">&#x27;我是王五&#x27;</span>,<span class="hljs-string">&#x27;我是赵六&#x27;</span>]&#125;<br>pd.DataFrame(data).to_sql(<span class="hljs-string">&#x27;testtext&#x27;</span>,con=engine,index=<span class="hljs-literal">False</span>,if_exists=<span class="hljs-string">&#x27;append&#x27;</span>)<br> <br></code></pre></td></tr></table></figure><h3 id="Pandas中map、apply、transform函数"><a href="#Pandas中map、apply、transform函数" class="headerlink" title="Pandas中map、apply、transform函数"></a>Pandas中map、apply、transform函数</h3><h4 id="1、map函数"><a href="#1、map函数" class="headerlink" title="1、map函数"></a>1、map函数</h4><p>针对series中的每个元素</p><p>在pandas中，map()函数可以用于根据字典的映射关系转换数据。map()函数是用于Series对象的方法，他将Series中的每个元素根据字典的映射进行转换。</p><p>输出是对应的列数据（所有列中单元格即列）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data = pd. DataFrame (<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: [<span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Mshis&#x27;</span>, <span class="hljs-string">&#x27;Gdli&#x27;</span> , <span class="hljs-string">&#x27;Agosh&#x27;</span>, <span class="hljs-string">&#x27;Filu&#x27;</span>, <span class="hljs-string">&#x27;Mack&#x27;</span>, <span class="hljs-string">&#x27;Lucy&#x27;</span>, <span class="hljs-string">&#x27;Pony&#x27;</span> ],<br>    <span class="hljs-string">&quot;gender&quot;</span>: [<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>],<br>    <span class="hljs-string">&quot;age&quot;</span>:[<span class="hljs-number">25</span>, <span class="hljs-number">34</span>, <span class="hljs-number">49</span>, <span class="hljs-number">42</span>, <span class="hljs-number">28</span>, <span class="hljs-number">23</span>, <span class="hljs-number">45</span>, <span class="hljs-number">21</span>, <span class="hljs-number">34</span>, <span class="hljs-number">29</span>]&#125;<br>)<br>data.gender=data.gender.<span class="hljs-built_in">map</span>(&#123;<span class="hljs-string">&quot;F&quot;</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;)<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><p> map也可以传替函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br> <br>data=pd.DataFrame(np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,size=(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)),<span class="hljs-comment">#size参数表明几行几列故为100行1列</span><br>                    columns=[<span class="hljs-string">&quot;python&quot;</span>]                <br>                  )<br><span class="hljs-built_in">print</span>(data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x&lt;<span class="hljs-number">60</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;不及格&#x27;</span><br>    <span class="hljs-keyword">elif</span> x&lt;<span class="hljs-number">80</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;中等&#x27;</span><br>    <span class="hljs-keyword">elif</span> x&lt;<span class="hljs-number">90</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;良好&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;优秀&#x27;</span><br>s=data.python.<span class="hljs-built_in">map</span>(change)<br>data[<span class="hljs-string">&#x27;等级&#x27;</span>]=s<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><h4 id="2、apply函数"><a href="#2、apply函数" class="headerlink" title="2、apply函数"></a>2、apply函数</h4><p>针对axis的整行或整列数据</p><p>apply函数是用于DataFrame的方法，它可以用于数据转换和处理。其接受一个函数作为参数，并将参数应用到DataFrame中的每一行或每一列。[相当于是通过axis来指定方向即行和列，axis&#x3D;0是自上而下即列，axis&#x3D;1是自左向右即行]</p><p>既支持Series也支持DataFrame。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br> <br>df=pd.DataFrame(np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,size=(<span class="hljs-number">100</span>,<span class="hljs-number">3</span>)),<br>                columns=[<span class="hljs-string">&#x27;math&#x27;</span>,<span class="hljs-string">&#x27;python&#x27;</span>,<span class="hljs-string">&#x27;en&#x27;</span>]<br>                )<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cover</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x.mean().<span class="hljs-built_in">round</span>(<span class="hljs-number">2</span>),x.count(),x.median()<br> <br><span class="hljs-built_in">print</span>(df.apply(cover,axis=<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------&#x27;</span>)<br><span class="hljs-built_in">print</span>(df.apply(cover,axis=<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p>再计算每一行的和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">row</span>):<br>    <span class="hljs-keyword">return</span> row[<span class="hljs-string">&#x27;math&#x27;</span>]+row[<span class="hljs-string">&#x27;python&#x27;</span>]+row[<span class="hljs-string">&#x27;en&#x27;</span>]<br> <br>df[<span class="hljs-string">&#x27;sum&#x27;</span>]=df.apply(<span class="hljs-built_in">sum</span>,axis=<span class="hljs-number">1</span>)<span class="hljs-comment">#axis=0会报错</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><h4 id="3、transfrom函数"><a href="#3、transfrom函数" class="headerlink" title="3、transfrom函数"></a>3、transfrom函数</h4><p>axis轴向默认为0</p><p>针对groupby后的组进行聚合运算，随后填充到每行或列数据中</p><p>在pandas中，transform函数用来对数据进行转换（允许对每个组的值进行操作），并返回与输入相同形状的结果，使得转换后的结果与原始数据保持对应的关系。</p><p><code>transform</code>通常与<code>groupby</code>一起使用，允许你对每一组的数据进行操作。最常见的用途是计算每个组的某种统计量，并在原始数据框中返回相同的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <br> <br><span class="hljs-comment"># 创建示例数据  </span><br>data = &#123;  <br>    <span class="hljs-string">&#x27;部门&#x27;</span>: [<span class="hljs-string">&#x27;销售&#x27;</span>, <span class="hljs-string">&#x27;销售&#x27;</span>, <span class="hljs-string">&#x27;市场&#x27;</span>, <span class="hljs-string">&#x27;市场&#x27;</span>, <span class="hljs-string">&#x27;研发&#x27;</span>, <span class="hljs-string">&#x27;研发&#x27;</span>],  <br>    <span class="hljs-string">&#x27;工资&#x27;</span>: [<span class="hljs-number">5000</span>, <span class="hljs-number">6000</span>, <span class="hljs-number">4500</span>, <span class="hljs-number">7000</span>, <span class="hljs-number">8000</span>, <span class="hljs-number">9000</span>]  <br>&#125;  <br>df = pd.DataFrame(data)  <br> <br><span class="hljs-comment"># 使用groupby和transform计算每个部门工资的标准化  </span><br>df[<span class="hljs-string">&#x27;工资标准化&#x27;</span>] = df.groupby(<span class="hljs-string">&#x27;部门&#x27;</span>)[<span class="hljs-string">&#x27;工资&#x27;</span>].transform(<span class="hljs-keyword">lambda</span> x: (x - x.mean()) / x.std())  <br> <br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/24/Excel%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/02/24/Excel%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="EXCEL"><a href="#EXCEL" class="headerlink" title="EXCEL"></a>EXCEL</h1><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>1、每次工作前先将原始表格进行复制备份操作，然后隐藏</p><p>2、视图–冻结窗格：冻结指定区域</p><p>3、视图–新建窗口：复制一个该图标的新视图</p><p>4、可以用过添加$&#x2F;(F4) 方式锁定单元格，自动填充就不会改变行和列的值了（上下即行、左右即列的自动填充）</p><p>5、数据透视表实现数据聚合+vlookup：注意vlookup引用区域是否需要锁定！！！需要的话F4或者+$符号进行锁定</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl+shift+L：快速筛选快捷键</p><p>alt+control：换行</p><p>win+左右键：实现分屏</p><p>透视表+切片器：切片器起到筛选作用</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="SUM函数"><a href="#SUM函数" class="headerlink" title="SUM函数"></a>SUM函数</h3><p>sum（区块，区块）：实现多区域的求和</p><p>eg：&#x3D;SUM(‘拌客源数据1-8月’!J2:J25,’拌客源数据1-8月’!J496:J562)</p><h3 id="SUMIF函数"><a href="#SUMIF函数" class="headerlink" title="SUMIF函数"></a>SUMIF函数</h3><p>sumif（筛选对象，筛选条件，求和对象）</p><p>eg：&#x3D;SUMIF(‘拌客源数据1-8月’!$A:$A,$B$15,’拌客源数据1-8月’!$J:$J)</p><h3 id="SUMIFS函数"><a href="#SUMIFS函数" class="headerlink" title="SUMIFS函数"></a>SUMIFS函数</h3><p>sumifs(求和对象，条件1判断所在区域，条件1，条件2判断所在区域，条件2,…..)</p><p>eg：&#x3D;SUMIFS(‘拌客源数据1-8月’!J:J,’拌客源数据1-8月’!H:H,”美团”,’拌客源数据1-8月’!A:A,”&gt;&#x3D;”&amp;DATE(YEAR(B39),MONTH(B39),1),’拌客源数据1-8月’!A:A,”&lt;&#x3D;”&amp;DATE(YEAR(B39),MONTH(B39)+1,1)-1)</p><p>“美团”：文本格式需要用字符串</p><p>大于等于这种符号需要加””,并且加上&amp;才能与后面的条件值相连（后面的函数部分）</p><h4 id="提取年月日方法"><a href="#提取年月日方法" class="headerlink" title="提取年月日方法"></a>提取年月日方法</h4><p>提取年月日：YEAR()&#x2F;MONTH()&#x2F;DAY()</p><p>DATE(YEAR,MONTH,DAY)</p><p>每个月的第一天：date（year（日期），month（日期），1）</p><p>每个月的最后一天&#x3D;下个月第一天-1&#x3D;date（year（日期），month（日期）+1，1）-1</p><h3 id="SUBTOTAL函数"><a href="#SUBTOTAL函数" class="headerlink" title="SUBTOTAL函数"></a>SUBTOTAL函数</h3><p>subtotal(函数代码编号，需要操作的数据区域) :可以根据源数据表的筛选进行自动变化</p><h3 id="IF函数"><a href="#IF函数" class="headerlink" title="IF函数"></a>IF函数</h3><p>if（逻辑比较条件，true的返回结果，false的返回结果）</p><p>if函数也可以进行嵌套使用</p><h3 id="VLOOKUP"><a href="#VLOOKUP" class="headerlink" title="VLOOKUP"></a>VLOOKUP</h3><p>vlookup(要查找的数据，要查找数据区域+返回数据所在区域，要返回数据区域的列号，精确0&#x2F;近似1匹配)</p><p>eg：&#x3D;VLOOKUP(B96,’拌客源数据1-8月’!D:E,2,0)</p><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>查询对象可以加上通配符：</p><p>” * “：匹配任意多字符  eg：&#x3D;VLOOKUP(I96&amp;”*”,F96:G103,2,FALSE)</p><p>” ？“：匹配一个字符  eg：&#x3D;VLOOKUP(I99&amp;”???”,F96:G103,2,FALSE)</p><h3 id="INDEX-MATCH"><a href="#INDEX-MATCH" class="headerlink" title="INDEX+MATCH"></a>INDEX+MATCH</h3><p>index+match：（目的：自由变化+角标拖拽按照表头&#x2F;字段自动填充数据）</p><p>match（查找的单元格位置，所在行或列的范围，近似&#x2F;精确查找）：返回的是所查找单元格所在行或列的位置</p><p>match返回的是数字</p><p>index（区域，行号，列号）：返回的是区域对应行列的单元格数据</p><blockquote><p>一定要注意！！！【自己的记忆方法】</p><p>从自己的表中选取字段进源数据表中进行match，再从中用match到的行和列找到对应index的数据</p><p>随后需要注意拖拽角标时的锁定问题</p><p>假如本身数据表只需要变更行则锁定列（字母A…），反之需要变更列则锁定行（数字1…）</p></blockquote><h3 id="周报"><a href="#周报" class="headerlink" title="周报"></a>周报</h3><p>下拉筛选器：视图–&gt;数据验证–&gt;序列（下拉菜单）</p><p>溢出的话可以在等号后面加上@符号</p><p>alt+&#x3D;：快速求和</p><p>迷你图：选中数据–&gt;插入–&gt;折线</p><p>开始-&gt;条件格式-&gt;新建格式规则：设置丰富的css</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/02/24/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/02/24/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章0.0<br><img src="/../images/test.jpeg" alt="我的头像"></p>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tableau</title>
    <link href="/2025/02/24/Tableau%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/02/24/Tableau%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Tableau"><a href="#Tableau" class="headerlink" title="Tableau"></a>Tableau</h1><p>摁住ctrl &#x3D; 复制</p><p>地图上shift可以平移</p><p>故事：类似于ppt，可以向其中添加工作表和仪表盘</p><p>蓝色：度量名称（离散）</p><p>绿色：度量值（连续）</p><p>做表格实则就是在行上（纵向）添加字段的过程</p><p>纵轴数据为行位置、横向数据为列位置。不同的维度进行度量</p><p>离散形成标签，连续形成数轴</p><p>横轴是维度，纵轴是高低</p><p>饼图：可以通过点击字段–&gt;快速表计算–&gt;合计百分比来将数据变化成百分比形式+设置格式可以修改小数点位数</p><p>编辑表计算：可以纵向设置百分比计算</p><p>折线图：可以进入分析–&gt;趋势线&#x2F;预测</p><p>度量值位置右键：双轴 可以实现百分比和数值类型在同一个表中</p><p>标记中的工具提示：可以鼠标悬浮看到对应信息</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/24/hello-world/"/>
    <url>/2025/02/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
